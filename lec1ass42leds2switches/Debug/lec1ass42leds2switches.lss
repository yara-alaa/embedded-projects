
lec1ass42leds2switches.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000042c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000088a  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
typedef signed short int s16;
typedef signed long int s32;
typedef  float f32;
typedef  double f64;
void main (void)
{   DDRD=0b00000011;
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	e1 e3       	ldi	r30, 0x31	; 49
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	83 e0       	ldi	r24, 0x03	; 3
  7a:	80 83       	st	Z, r24
DDRC=0b00000000;
  7c:	e4 e3       	ldi	r30, 0x34	; 52
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1
PORTC=0b00000011;
  82:	e5 e3       	ldi	r30, 0x35	; 53
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	80 83       	st	Z, r24
while(1)
{
	if(PINC==0b00000010)
  8a:	e3 e3       	ldi	r30, 0x33	; 51
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	82 30       	cpi	r24, 0x02	; 2
  92:	29 f4       	brne	.+10     	; 0x9e <main+0x32>
	{
		PORTD=0b00000001;
  94:	e2 e3       	ldi	r30, 0x32	; 50
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
  9c:	f6 cf       	rjmp	.-20     	; 0x8a <main+0x1e>
	}
	else if(PINC==0b00000001)
  9e:	e3 e3       	ldi	r30, 0x33	; 51
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	29 f4       	brne	.+10     	; 0xb2 <main+0x46>
		{
			PORTD=0b00000010;
  a8:	e2 e3       	ldi	r30, 0x32	; 50
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
  b0:	ec cf       	rjmp	.-40     	; 0x8a <main+0x1e>
		}
	else if(PINC==0b00000000)
  b2:	e3 e3       	ldi	r30, 0x33	; 51
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	29 f4       	brne	.+10     	; 0xc6 <main+0x5a>
			{
				PORTD=0b00000011;
  bc:	e2 e3       	ldi	r30, 0x32	; 50
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	80 83       	st	Z, r24
  c4:	e2 cf       	rjmp	.-60     	; 0x8a <main+0x1e>
			}
	else if(PINC==0b00000011)
  c6:	e3 e3       	ldi	r30, 0x33	; 51
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	e9 f6       	brne	.-70     	; 0x8a <main+0x1e>
				{
					PORTD=0b00000000;
  d0:	e2 e3       	ldi	r30, 0x32	; 50
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
  d6:	d9 cf       	rjmp	.-78     	; 0x8a <main+0x1e>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
